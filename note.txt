//==============action buttons=============
 
   <View style={styles.buttonContainer}>
        <TouchableOpacity style={[styles.button, styles.requestButton]} onPress={()=>Alert(pressed)}>
          <Text style={styles.buttonText}>Request</Text>
        </TouchableOpacity>
        <TouchableOpacity style={[styles.button, styles.sosButton]} onPress={()=>Alert(pressed)}>
          <Text style={styles.buttonText}>SOS</Text>
        </TouchableOpacity>
      </View>

        button: {
    flex: 1,
    paddingVertical: 10,
    borderRadius: 5,
    alignItems: 'center',
    marginHorizontal: 5,
  },
  requestButton: {
    backgroundColor: '#4CAF50', // Green for "Request"
  },
  sosButton: {
    backgroundColor: '#F44336', // Red for "SOS"
  },
  buttonText: {
    color: 'white',
    fontWeight: 'bold',
  },

//=============Live Member================

import React, { useEffect, useState } from 'react';
import { View, Text, FlatList, StyleSheet } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { devURL } from '../constants/endpoints';
import io from 'socket.io-client';
 
const LiveTeamMembers = ({ setMembers }) => {
    // const [members, setMembers] = useState([]);
    const [socket, setSocket] = useState(null);
 
    const initializeSocket = async () => {
        const jwtToken = await AsyncStorage.getItem('token');
        const socketInstance = io(devURL, {
            auth: {
                token: jwtToken,
                userId: "your-user-id-369",
            },
            transports: ["websocket"],
        });
 
        socketInstance.on('connection', () => {
            console.log('Socket connected:', socketInstance.id);
        });
 
        socketInstance.on('member_674d4fd79c5285f0c99b0062', (updatedMembers) => {
            console.log('--------------', updatedMembers);
            setMembers(updatedMembers);
        });
 
        socketInstance.emit('data', { event: 'Member fetchin live team ....' });
 
        setSocket(socketInstance);
    };
 
    useEffect(() => {
        initializeSocket();
 
        // Cleanup on unmount
        return () => {
            if (socket) {
                socket.disconnect();
                console.log('Socket disconnected');
            }
        };
    }, []); // Empty dependency ensures this runs only once.
 
    const renderMember = ({ item }) => (
        <View style={styles.memberContainer}>
            <Text style={styles.name}>{item.name}</Text>
            <Text style={styles.location}>Location: {item.location}</Text>
            <Text style={styles.status}>Status: {item.status}</Text>
        </View>
    );
 
    return (
        <></>
    );
};
 
const styles = StyleSheet.create({
    container: {
        flex: 1,
        padding: 16,
        backgroundColor: '#f9f9f9',
    },
    title: {
        fontSize: 20,
        fontWeight: 'bold',
        marginBottom: 10,
    },
    memberContainer: {
        backgroundColor: '#fff',
        padding: 12,
        marginVertical: 8,
        borderRadius: 8,
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
        elevation: 2,
    },
    name: {
        fontSize: 16,
        fontWeight: '600',
    },
    location: {
        fontSize: 14,
        color: '#555',
        marginTop: 4,
    },
    status: {
        fontSize: 14,
        color: '#888',
        marginTop: 4,
    },
    noMembers: {
        fontSize: 16,
        color: '#aaa',
        textAlign: 'center',
        marginTop: 20,
    },
});
 
export default LiveTeamMembers;

//============Live Member================

import { createContext, useContext, useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import { devURL } from '../../contsants/endPoints';
import axios from 'axios';
import Swal from 'sweetalert2';
 
const AuthContext = createContext();
 
export function AuthProvider({ children }) {

  return (
    <AuthContext.Provider value={{
     
    }}>
      {children}
    </AuthContext.Provider>
  );
}
 
export function useAuth() {
  return useContext(AuthContext);
}
 
 \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\=================template
 import * as React from 'react';
import { AuthProvider } from './context/auth';
import { KeyboardAvoidingViewProvider } from './context/KeyboardAvoidingView';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import AsyncStorage from '@react-native-async-storage/async-storage';

import SplashScreen from './screen/SplashScreen';
import LoginScreen from './screen/LoginScreen';
import SignupScreen from './screen/SignupScreen';
import UserTabNavigator from './components/UserTabNavigator';
import MemberTabNavigator from './components/MemberTabNavigator';
import AddMember from './screen/AddMembers';
import MemberDetail from './screen/MemberDetail';
import Notification from './screen/Notification';

const Stack = createStackNavigator();

export default function App() {
  const [isLoading, setIsLoading] = React.useState(true);
  const [isAuthenticated, setIsAuthenticated] = React.useState(false);

  React.useEffect(() => {
    const checkAuthStatus = async () => {
      const token = await AsyncStorage.getItem('token');
      setIsAuthenticated(!!token);
      setIsLoading(false);
    };
    checkAuthStatus();
  }, []);

  if (isLoading) {
    return <SplashScreen />;
  }

  return (
    <AuthProvider>
      <KeyboardAvoidingViewProvider>
        <NavigationContainer>
          <Stack.Navigator>
            {isAuthenticated ? (
              <>
                <Stack.Screen name="Home/user" component={UserTabNavigator} options={{ headerShown: false }} />
                <Stack.Screen name="Home/member" component={MemberTabNavigator} options={{ headerShown: false }} />
              </>
            ) : (
              <>
                <Stack.Screen name="Splash" component={SplashScreen} options={{ headerShown: false }} />
                <Stack.Screen name="Login" component={LoginScreen} options={{ headerShown: false }} />
                <Stack.Screen name="Signup" component={SignupScreen} options={{ headerShown: false }} />
              </>
            )}

            <Stack.Screen name="AddMember" component={AddMember} options={{ headerShown: false }} />
            <Stack.Screen name="MemberDetail" component={MemberDetail} options={{ headerShown: false }} />
            <Stack.Screen name="Notifications" component={Notification} options={{ headerShown: false }} />
          </Stack.Navigator>
        </NavigationContainer>
      </KeyboardAvoidingViewProvider>
    </AuthProvider>
  );
}

===//////////////////////////////////Navigator
////=================================Map
import React, { useState } from "react";
import { SafeAreaView, View, TextInput, StyleSheet, Image, TouchableOpacity, Text } from "react-native";
import MapView, { Marker } from "react-native-maps";
import Icon from 'react-native-vector-icons/FontAwesome';
import TeamMembers from "../components/Model/TeamsMember";
import Places from "../components/places";

export default function UserMap() {
    const [isModalVisible, setModalVisible] = useState(false);

    const toggleModal = () => {
        setModalVisible(!isModalVisible);
    };

    return (
        <SafeAreaView style={styles.container}>
            {/* Map Container */}
            <MapView
                style={styles.map}
                initialRegion={{
                    latitude: 37.78825, // Example latitude
                    longitude: -122.4324, // Example longitude
                    latitudeDelta: 0.0922,
                    longitudeDelta: 0.0421,
                }}
            >
                <Marker
                    coordinate={{ latitude: 37.78825, longitude: -122.4324 }}
                    title="My Marker"
                    description="This is a description of the marker"
                />
            </MapView>

            {/* Search Bar and Place Container */}
            <View style={styles.searchBarAndPlaceContainer}>
                {/* Search Bar Overlay */}
                <View style={styles.searchBarContainer}>
                    <TouchableOpacity onPress={toggleModal} style={styles.menuIconContainer}>
                        <Icon name="bars" size={28} color="#376ADA" />
                    </TouchableOpacity>
                    
                    {/* Search Bar */}
                    <View style={styles.searchBar}>
                        <Icon name="search" size={20} color="#376ADA" style={styles.iconLeft} />
                        <TextInput
                            style={styles.searchInput}
                            placeholder="Search location"
                            placeholderTextColor="#888"
                        />
                        <Image
                            source={{ uri: "https://via.placeholder.com/30" }}
                            style={styles.imageRight}
                        />
                    </View>
                </View>

                {/* Place View Right Below Search Bar */}
                <View style={styles.placeContainer}>
                    <Places/>
                </View>
            </View>

            {/* Modal for Teams Members */}
            <TeamMembers visible={isModalVisible} setVisible={setModalVisible} />
        </SafeAreaView>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
    },
    map: {
        ...StyleSheet.absoluteFillObject,
    },
    searchBarAndPlaceContainer: {
        position: 'absolute',
        top: 10,
        width: '100%',
        paddingHorizontal: 10,
    },
    searchBarContainer: {
        flexDirection: 'row',
        alignItems: 'center',
        backgroundColor: '#fff',
        borderRadius: 8,
        padding: 8,
        elevation: 5,
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.3,
        shadowRadius: 4,
    },
    menuIconContainer: {
        marginRight: 10,
    },
    searchBar: {
        flex: 1,
        flexDirection: 'row',
        alignItems: 'center',
        backgroundColor: '#fff',
        borderRadius: 8,
    },
    searchInput: {
        flex: 1,
        height: 40,
        marginLeft: 10,
        color: '#000',
    },
    iconLeft: {
        marginLeft: 10,
    },
    imageRight: {
        width: 30,
        height: 30,
        borderRadius: 15,
        marginLeft: 10,
    },
    placeContainer: {
        marginTop: 8,
        padding: 5,
        borderRadius: 8,
    },
    placeText: {
        color: '#fff',
        fontWeight: 'bold',
    },
});

////==============login===========
import React, { useEffect, useState } from 'react';
import {
  View,
  TextInput,
  TouchableOpacity,
  Alert,
  Platform,
  Image,
  StyleSheet,
  Text,
} from 'react-native';
import Icon from 'react-native-vector-icons/Feather';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { devURL } from '../constants/endpoints';
import { useAuth } from '../context/auth';
import Logo from '../components/Assets/logo.jpeg';

const LoginScreen = ({ navigation }) => {
  console.log('LoginScreen ==============');
  
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [authData, setAuthData] = useState([]);
  const [isPasswordVisible, setIsPasswordVisible] = useState(false); // State to manage password visibility
  const { IsAuthenticaticated } = useAuth();

  const isButtonDisabled = !email || !password;

  const getRole = async () => {
    try {
      const data = await IsAuthenticaticated(navigation);
      setAuthData(data);
    } catch (error) {
      console.error('Error retrieving authentication data:', error);
    }
  };

  const handleLogin = async () => {
    if (isButtonDisabled) {
      Alert.alert('Validation Error', 'Please enter both email and password.');
      return;
    }

    setLoading(true);
    try {
      const response = await fetch(`${devURL}/auth/login`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password }),
      });
      const data = await response.json();

      console.log('=====tokrn hasi=====')
      console.log(jwtToken)

      if (response.ok) {
        const role = data?.type;
        const jwtToken = data?.token;
        console.log('jwtToken', jwtToken)
        if (jwtToken) await AsyncStorage.setItem('token', jwtToken);
        Alert.alert('Login Success', `Welcome ${role}!`);

        if (role === 'user') navigation.navigate('Home/user');
        else if (role === 'member') navigation.navigate('Home/member');
      } else {
        Alert.alert('Login Failed', data.message || 'Invalid email or password.');
      }
    } catch (error) {
      Alert.alert('Login Error', 'Something went wrong. Please try again.');
    } finally {
      setLoading(false);
    }
  };


  useEffect(() => {
    getRole();
  }, []);


  return (
    <View style={styles.container}>
      <Image source={Logo} style={styles.image} />
      <Text style={styles.logo}>Login Here !</Text>

      <View style={styles.inputContainer}>
        <View style={styles.inputField}>
          <Icon name="mail" size={24} color="#333" style={styles.icon} />
          <TextInput
            style={styles.input}
            placeholder="Email"
            placeholderTextColor="#999"
            onChangeText={(text) => setEmail(text)}
            value={email}
            autoCapitalize="none"
            keyboardType="email-address"
          />
        </View>

        <View style={styles.inputField}>
          <Icon name="lock" size={24} color="#333" style={styles.icon} />
          <TextInput
            style={styles.input}
            placeholder="Password"
            placeholderTextColor="#999"
            secureTextEntry={!isPasswordVisible}
            onChangeText={(text) => setPassword(text)}
            value={password}
            autoCapitalize="none"
          />
          <TouchableOpacity
            style={styles.eyeIcon}
            onPress={() => setIsPasswordVisible(!isPasswordVisible)}
          >
            <Icon name={isPasswordVisible ? 'eye' : 'eye-off'} size={24} color="#333" />
          </TouchableOpacity>
        </View>
      </View>

      <TouchableOpacity
        disabled={isButtonDisabled || loading}
        style={[styles.loginButton, (isButtonDisabled || loading) && styles.buttonDisabled]}
        onPress={handleLogin}
      >
        <Text style={styles.loginButtonText}>{loading ? 'Logging in...' : 'Login'}</Text>
      </TouchableOpacity>

      <TouchableOpacity onPress={() => navigation.navigate('ForgotPassword')}>
        <Text style={styles.forgotPassword}>Forgot Password?</Text>
      </TouchableOpacity>

      <TouchableOpacity onPress={() => navigation.navigate('Signup')}>
        <Text style={styles.signUpText}>
          Don’t have an account? <Text style={styles.signUp}>Sign Up</Text> here
        </Text>
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    padding: 20,
    backgroundColor: '#fff',
    paddingTop: Platform.OS === 'android' ? 50 : 0,
  },
  logo: {
    fontSize: 30,
    fontWeight: 'bold',
    color: '#007ACC',
    textAlign: 'center',
    textShadowColor: 'rgba(0, 0, 0, 0.2)',
    textShadowOffset: { width: 1, height: 1 },
    textShadowRadius: 4,
    marginBottom: 10,
  },
  image: {
    width: 150,
    height: 180,
    marginBottom: 10,
    alignSelf: 'center',
  },
  inputContainer: {
    marginBottom: 10,
  },
  inputField: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#fff',
    borderRadius: 10,
    marginBottom: 15,
    paddingHorizontal: 10,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.1,
    shadowRadius: 10,
    elevation: 5,
  },
  icon: {
    marginRight: 10,
  },
  input: {
    flex: 1,
    paddingVertical: 15,
    fontSize: 16,
    color: '#333',
  },
  eyeIcon: {
    marginLeft: 10,
  },
  loginButton: {
    backgroundColor: '#342671',
    paddingVertical: 15,
    borderRadius: 25,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.2,
    shadowRadius: 15,
    elevation: 5,
  },
  buttonDisabled: {
    backgroundColor: '#B0B0B0',
  },
  loginButtonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
  },
  forgotPassword: {
    color: '#333',
    textAlign: 'center',
    fontSize: 16,
  },
  signUpText: {
    color: '#333',
    fontSize: 16,
    textAlign: 'center',
    marginTop: 10,
  },
  signUp: {
    color: '#34B8C5',
    fontWeight: 'bold',
    color: '#007ACC',
    textAlign: 'center',
    textShadowColor: 'rgba(0, 0, 0, 0.2)',
    textShadowOffset: { width: 1, height: 1 },
  },
});

export default LoginScreen;


